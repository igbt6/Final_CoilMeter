/*
 * splc501c.h
 *
 *  Created on: May 9, 2012
 *      Author: lukasz
 */

#include "stdbool.h"
#include "em_chip.h"
#include "em_gpio.h"

#ifndef SPLC501C_H_
#define SPLC501C_H_

#define SCREEN_WIDTH 	132
#define SCREEN_HEIGHT	64
#define PIXELS_PER_PAGE	8

#define SPLC501C_DISPLAY_ON 		0xAF
#define SPLC501C_DISPLAY_OFF		0xAE

#define SPLC501C_START_LINE			0x40

#define SPLC501C_PAGE_ADDRESS		0xB0

#define SPLC501C_COLUMN_ADDRESS_HI	0x10
#define SPLC501C_COLUMN_ADDRESS_LO	0x00

#define SPLC501C_ADC_NORMAL			0xA0
#define SPLC501C_ADC_REVERSE		0xA1

#define SPLC501C_DISPLAY_NORMAL		0xA6
#define SPLC501C_DISPLAY_REVERSE	0xA7

#define SPLC501C_DISPLAY_ALL_ON		0xA5
#define SPLC501C_DISPLAY_ALL_OFF	0xA4

#define SPLC501C_BIAS_19			0xA2
#define SPLC501C_BIAS_15			0xA3

#define SPLC501C_RMW_START			0xE0
#define SPLC501C_RMW_END			0xEE

#define SPLC501C_RESET				0xE2

#define SPLC501C_COM0				0xC0
#define SPLC501C_COM63				0xC8

#define SPLC501C_POWERON			0x2F

#define SPLC501C_VOLTAGE_RATIO		0x20

#define SPLC501C_VOLUME_MODE		0x81
#define SPLC501C_VOLUME_SET			0x00

#define SPLC501C_PAGE_BLINKING_MODE	0xD5
#define SPLC501C_PAGE_BLINKING_0	0x01
#define SPLC501C_PAGE_BLINKING_1	0x02
#define SPLC501C_PAGE_BLINKING_2	0x04
#define SPLC501C_PAGE_BLINKING_3	0x08
#define SPLC501C_PAGE_BLINKING_4	0x10
#define SPLC501C_PAGE_BLINKING_5	0x20
#define SPLC501C_PAGE_BLINKING_6	0x40
#define SPLC501C_PAGE_BLINKING_7	0x80

#define FONT_OFFSET 32
#define FONT_WIDTH	5

// control signals
/*
 *LCD: zasilanie z 3,3V z plytki
 * LCD  |     uC
 *	VSS -> 1: GND
 *	VDD -> 2: 3v3
 *	C86 -> 3: GND
 *	DB7 -> 4: PD7
 *	DB6 -> 5: PD6
 *	DB5 -> 6: PD5
 *	DB4 -> 7: PD4
 *	DB3 -> 8: PD3
 *	DB2 -> 9: PD2
 *	DB1 -> 10: PD1
 *	DB0 -> 11: PD0    // PD0 musialem na ADC przeznaczyc  dlatego narazie DB0 bedzie
 *	/RD -> 12: PC0
 *	/WR -> 13: PC1
 *	A0  -> 14: PC2
 * /RES -> 15: PC3
 * /CS1 -> 16: PC4
 *	->	17 i 18 : not connected   17-LEDAnoda, 18-LEDKatoda
 * */

#define PIN_PORT_STER gpioPortA
#define PIN_RD		1<<8
#define PIN_WR		1<<9
#define PIN_A0		1<<10
#define PIN_RES  	1<<11
#define PIN_CS1 	1<<12 // I CZA TO JESZCZE W GPIO_Init POZMIENIAÆ
#define PIN_PORT_DATA gpioPortA
#define PIN_ALL_STER_PORT (PIN_RD|PIN_WR|PIN_A0|PIN_RES|PIN_CS1)  //portA
#define PIN_ALL_DATA_PORT (1<<0|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7)   // portA
// first databus bit

/*
 #define PIN_PORT_STER gpioPortC
 #define PIN_RD		1<<0
 #define PIN_WR		1<<1
 #define PIN_A0		1<<2
 #define PIN_RES  	1<<3
 #define PIN_CS1 	1<<4 // I CZA TO JESZCZE W GPIO_Init POZMIEN
 #define PIN_PORT_DATA gpioPortD
 #define PIN_ALL_STER_PORT (PIN_RD|PIN_WR|PIN_A0|PIN_RES|PIN_CS1)  //portC
 #define PIN_ALL_DATA_PORT (1<<0|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7)   // portD
 */
static const unsigned char font5x7[] = { 0x00, 0x00, 0x00, 0x00, 0x00, // (spacja)
		0x00, 0x00, 0x5F, 0x00, 0x00, // !
		0x00, 0x07, 0x00, 0x07, 0x00, // "
		0x14, 0x7F, 0x14, 0x7F, 0x14, // #
		0x24, 0x2A, 0x7F, 0x2A, 0x12, // $
		0x23, 0x13, 0x08, 0x64, 0x62, // %
		0x36, 0x49, 0x55, 0x22, 0x50, // &
		0x00, 0x05, 0x03, 0x00, 0x00, // '
		0x00, 0x1C, 0x22, 0x41, 0x00, // (
		0x00, 0x41, 0x22, 0x1C, 0x00, // )
		0x08, 0x2A, 0x1C, 0x2A, 0x08, // *
		0x08, 0x08, 0x3E, 0x08, 0x08, // +
		0x00, 0x50, 0x30, 0x00, 0x00, // ,
		0x08, 0x08, 0x08, 0x08, 0x08, // -
		0x80, 0xB0, 0xB0, 0x80, 0x80, // . //0x00, 0x30, 0x30, 0x00, 0x00,
		0x20, 0x10, 0x08, 0x04, 0x02, // /
		0xBE, 0xD1, 0xC9, 0xC5, 0xBE, // 0 //0x3E, 0x51, 0x49, 0x45, 0x3E,
		0x80, 0xC2, 0xFF, 0xC0, 0x80, // 1 //0x00, 0x42, 0x7F, 0x40, 0x00,
		0xC2, 0xE1, 0xD1, 0xC9, 0xC6, // 2 //0x42, 0x61, 0x51, 0x49, 0x46,
		0xA1, 0xC1, 0xC5, 0xCB, 0xB1, // 3 //0x21, 0x41, 0x45, 0x4B, 0x31,
		0x98, 0x94, 0x92, 0xFF, 0x90, // 4 //0x18, 0x14, 0x12, 0x7F, 0x10,
		0xA7, 0xC5, 0xC5, 0xC5, 0xB9, // 5 //0x27, 0x45, 0x45, 0x45, 0x39,
		0xBC, 0xCA, 0xC9, 0xC9, 0xB0, // 6 //0x3C, 0x4A, 0x49, 0x49, 0x30,
		0x81, 0xF1, 0x89, 0x85, 0x83, // 7 //0x01, 0x71, 0x09, 0x05, 0x03,
		0xB6, 0xC9, 0xC9, 0xC9, 0xB6, // 8 //0x36, 0x49, 0x49, 0x49, 0x36,
		0x86, 0xC9, 0xC9, 0xA9, 0x9E, // 9 //0x06, 0x49, 0x49, 0x29, 0x1E,
		0x00, 0x36, 0x36, 0x00, 0x00, // :
		0x00, 0x56, 0x36, 0x00, 0x00, // ;
		0x00, 0x08, 0x14, 0x22, 0x41, // <
		0x14, 0x14, 0x14, 0x14, 0x14, // =
		0x41, 0x22, 0x14, 0x08, 0x00, // >
		0x02, 0x01, 0x51, 0x09, 0x06, // ?
		0x32, 0x49, 0x79, 0x41, 0x3E, // @
		0x7E, 0x11, 0x11, 0x11, 0x7E, // A
		0x7F, 0x49, 0x49, 0x49, 0x36, // B
		0x3E, 0x41, 0x41, 0x41, 0x22, // C
		0x7F, 0x41, 0x41, 0x22, 0x1C, // D
		0x7F, 0x49, 0x49, 0x49, 0x41, // E
		0x7F, 0x09, 0x09, 0x01, 0x01, // F
		0x3E, 0x41, 0x41, 0x51, 0x32, // G
		0x7F, 0x08, 0x08, 0x08, 0x7F, // H
		0x00, 0x41, 0x7F, 0x41, 0x00, // I
		0x20, 0x40, 0x41, 0x3F, 0x01, // J
		0x7F, 0x08, 0x14, 0x22, 0x41, // K
		0x7F, 0x40, 0x40, 0x40, 0x40, // L
		0x7F, 0x02, 0x04, 0x02, 0x7F, // M
		0x7F, 0x04, 0x08, 0x10, 0x7F, // N
		0x3E, 0x41, 0x41, 0x41, 0x3E, // O
		0x7F, 0x09, 0x09, 0x09, 0x06, // P
		0x3E, 0x41, 0x51, 0x21, 0x5E, // Q
		0x7F, 0x09, 0x19, 0x29, 0x46, // R
		0x46, 0x49, 0x49, 0x49, 0x31, // S
		0x01, 0x01, 0x7F, 0x01, 0x01, // T
		0x3F, 0x40, 0x40, 0x40, 0x3F, // U
		0x1F, 0x20, 0x40, 0x20, 0x1F, // V
		0x7F, 0x20, 0x18, 0x20, 0x7F, // W
		0x63, 0x14, 0x08, 0x14, 0x63, // X
		0x03, 0x04, 0x78, 0x04, 0x03, // Y
		0x61, 0x51, 0x49, 0x45, 0x43, // Z
		0x00, 0x00, 0x7F, 0x41, 0x41, // [
		0x02, 0x04, 0x08, 0x10, 0x20, // "\"
		0x41, 0x41, 0x7F, 0x00, 0x00, // ]
		0x04, 0x02, 0x01, 0x02, 0x04, // ^
		0x40, 0x40, 0x40, 0x40, 0x40, // _
		0x00, 0x01, 0x02, 0x04, 0x00, // `
		0x20, 0x54, 0x54, 0x54, 0x78, // a
		0x7F, 0x48, 0x44, 0x44, 0x38, // b
		0x38, 0x44, 0x44, 0x44, 0x20, // c
		0x38, 0x44, 0x44, 0x48, 0x7F, // d
		0x38, 0x54, 0x54, 0x54, 0x18, // e
		0x08, 0x7E, 0x09, 0x01, 0x02, // f
		0x08, 0x14, 0x54, 0x54, 0x3C, // g
		0x7F, 0x08, 0x04, 0x04, 0x78, // h
		0x00, 0x44, 0x7D, 0x40, 0x00, // i
		0x20, 0x40, 0x44, 0x3D, 0x00, // j
		0x00, 0x7F, 0x10, 0x28, 0x44, // k
		0x00, 0x41, 0x7F, 0x40, 0x00, // l
		0x7C, 0x04, 0x18, 0x04, 0x78, // m
		0x7C, 0x08, 0x04, 0x04, 0x78, // n
		0x38, 0x44, 0x44, 0x44, 0x38, // o
		0x7C, 0x14, 0x14, 0x14, 0x08, // p
		0x08, 0x14, 0x14, 0x18, 0x7C, // q
		0x7C, 0x08, 0x04, 0x04, 0x08, // r
		0x48, 0x54, 0x54, 0x54, 0x20, // s
		0x04, 0x3F, 0x44, 0x40, 0x20, // t
		0x3C, 0x40, 0x40, 0x20, 0x7C, // u
		0x1C, 0x20, 0x40, 0x20, 0x1C, // v
		0x3C, 0x40, 0x30, 0x40, 0x3C, // w
		0x44, 0x28, 0x10, 0x28, 0x44, // x
		0x0C, 0x50, 0x50, 0x50, 0x3C, // y
		0x44, 0x64, 0x54, 0x4C, 0x44, // z
		0x00, 0x08, 0x36, 0x41, 0x00, // {
		0x00, 0x00, 0x7F, 0x00, 0x00, // |
		0x00, 0x41, 0x36, 0x08, 0x00, // }
		0x08, 0x08, 0x2A, 0x1C, 0x08, // ->
		0x08, 0x1C, 0x2A, 0x08, 0x08 // <-
		};

void GLCD_Init(void);
void GLCD_InitPorts(void);
void GLCD_WriteCommand(uint8_t);
void GLCD_WriteData(uint8_t);
void GLCD_GoTo(uint8_t, uint8_t);
void GLCD_WriteString(char *);
void GLCD_SetPixel(uint8_t x, uint8_t y, bool color);
void GLCD_ClearScreen(void);
void GLCD_line_recursive(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1);
void GLCD_WriteChar(char charCode);
uint8_t GLCD_ReadData();
uint8_t GLCD_ReadStatus(void);
//
void GLCD_Rectangle(unsigned char x, unsigned char y, unsigned char b,
		unsigned char a);
void GLCD_Circle(unsigned char cx, unsigned char cy, unsigned char radius);
void GLCD_Line(int X1, int Y1, int X2, int Y2);

void GLCD_bmp(const unsigned char *bitmapa);
void GLCD_Bitmap(char *, unsigned char, unsigned char, unsigned char,
		unsigned char);

#endif /* SPLC501C_H_ */
